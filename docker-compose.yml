services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
    # ⚠️ Only expose to host if you really need it; otherwise remove this line
    # ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -p 5432"]
      interval: 52s
      timeout: 2s
      retries: 40
      start_period: 5s
    restart: unless-stopped
    profiles: ["test", "dev", "prod"]

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://app:app@db:5432/appdb
      PORT: 3001
      HOST: 0.0.0.0
      CORS_ORIGIN: http://localhost:8080
      NODE_ENV: development
      STARTUP_MIGRATE: background   # background | block | off
      STARTUP_SEED: "true"
      ENABLE_SIM: "true"
    volumes:
      - ./backend:/usr/src/app
    command: ["pnpm","dev"]
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      # Use Node itself for health (no curl/wget dependency needed)
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "3001:3001"   # keep if you want to curl API directly from host
    restart: unless-stopped
    profiles: ["dev"]

  vite:
    image: node:20
    working_dir: /app
    entrypoint: ["/bin/sh","-lc"]
    command: 
      - set -e; export CI=true; corepack enable || true; (pnpm -v >/dev/null 2>&1 || npm i -g pnpm); pnpm install --force; HOST=0.0.0.0 pnpm run dev -- --host
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - pnpm-store:/root/.local/share/pnpm
    expose:
      - "5173"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5173/',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 5s
      retries: 30
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    profiles: ["dev"]

  proxy:
    image: nginx:1.27-alpine
    volumes:
      - ./ops/nginx/dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      api:
        condition: service_healthy
      vite:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev"]

    # efemeral test container
  api-tests:
    restart: "no"
    tty: false
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    environment:
      CI: "true"
      NODE_ENV: test
      DATABASE_URL: postgres://app:app@db:5432/appdb_test
      INGEST_TOKEN: ${INGEST_TOKEN:-dev_only_change_me_please}
      PGPASSWORD: app
    volumes:
      - ./backend:/usr/src/app
    command:
      - /bin/sh
      - -lc
      - >
        set -e;
        echo "[tests] waiting for db...";
        until pg_isready -h db -U app -d postgres >/dev/null 2>&1; do sleep 1; done;
        echo "[tests] db is ready";
        echo "[tests] ensuring appdb_test exists...";
        psql -h db -U app -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='appdb_test'" | grep -q 1 \
          || psql -h db -U app -d postgres -c "CREATE DATABASE appdb_test OWNER app";
        echo "[tests] running jest...";
        pnpm test -- --ci --runInBand --detectOpenHandles;
        echo "[tests] jest finished";
    depends_on:
      db:
        condition: service_healthy
    profiles: ["test"]

 # Prod API (no bind mount; uses Dockerfile prod target)
  api-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: prod
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:?set in env or .env}
      PORT: 3001
      HOST: 0.0.0.0
      STARTUP_MIGRATE: block
      STARTUP_SEED: "false"
    depends_on:
      db:
        condition: service_healthy
    ports: ["3001:3001"]
    profiles: ["prod"]

volumes:
  pgdata:
  pnpm-store:
