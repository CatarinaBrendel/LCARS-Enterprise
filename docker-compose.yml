services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
    # ⚠️ Only expose to host if you really need it; otherwise remove this line
    # ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://app:app@db:5432/appdb
      PORT: 3001
      HOST: 0.0.0.0
      CORS_ORIGIN: http://localhost:8080
      NODE_ENV: development,
      STARTUP_MIGRATE: background   # background | block | off
      STARTUP_SEED: "false"
    volumes:
      - ./backend:/usr/src/app
    command: ["pnpm","dev"]
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      # Use Node itself for health (no curl/wget dependency needed)
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "3001:3001"   # keep if you want to curl API directly from host
    restart: unless-stopped

  vite:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm i -g pnpm && pnpm install && pnpm run dev -- --host"
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
    expose:
      - "5173"       # only inside the docker network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5173/',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 5s
      retries: 30     # Vite install can take a bit on first boot
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped

  proxy:
    image: nginx:1.27-alpine
    volumes:
      - ./ops/nginx/dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      api:
        condition: service_healthy
      vite:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
