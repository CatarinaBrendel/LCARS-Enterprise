name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/ci.yml"
      - "docker-compose.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"

jobs:
  backend:
    name: Backend (lint & test)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: appdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U app -d appdb"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      NODE_ENV: test
      DATABASE_URL: postgres://app:app@localhost:5432/appdb_test
      INGEST_TOKEN: dev_only_change_me_please
    
    defaults:
      run:
        working-directory: backend
    
    steps:
      - uses: actions/checkout@v4
        with:
            lfs: true
            submodules: false

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Create appdb_test
        env:
          PGPASSWORD: app
        run: |
          psql -h localhost -U app -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='appdb_test'" | grep -q 1 \
            || psql -h localhost -U app -d postgres -c "CREATE DATABASE appdb_test OWNER app"

      - name: "Pre-flight: show migrations"
        working-directory: backend
        run: |
          set -e
          echo "== ls backend/database/migrations =="
          ls -la database/migrations
          echo "== grep retention function =="
          if ! grep -nH "prune_crew_metric_age_with_floor" database/migrations/*; then
            echo "[warn] retention function not found in migration files (grep failed)"
          fi
          echo "== git-tracked files under migrations =="
          git ls-files database/migrations
          

      - name: Run backend tests (docker compose)
        env:
          INGEST_TOKEN: dev_only_change_me_please   # pass whatever your tests expect
        run: |
          set -e
          # start only the DB
          docker compose --profile test up -d db

          # wait + create appdb_test FROM INSIDE the db container (local socket, no password prompt)
          echo "[ci] waiting for postgres..."
          docker compose exec -T db sh -lc '
            until pg_isready -U app -d postgres >/dev/null 2>&1; do sleep 1; done;
            echo "[ci] ensuring appdb_test exists...";
            psql -U app -d postgres -v ON_ERROR_STOP=1 -tc "SELECT 1 FROM pg_database WHERE datname='\''appdb_test'\''" | grep -q 1 \
              || psql -U app -d postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE appdb_test OWNER app";
            echo "[ci] databases:"; psql -U app -d postgres -c "\l" | sed -n '1,10p'
          '

          # quick sanity check: does the test container see the right URL and can it connect?
          docker compose --profile test run --rm api-tests sh -lc '
            echo "[ci] DATABASE_URL=$DATABASE_URL";
            node -e "
              const {Client}=require(\"pg\");
              const c=new Client({connectionString:process.env.DATABASE_URL});
              c.connect().then(()=>c.end()).then(()=>console.log(\"[ci] pg connection OK\")).catch(e=>{console.error(\"[ci] pg connect FAIL:\", e.message); process.exit(1);});
            "
          '

          # run jest and exit
          docker compose --profile test run --rm api-tests \
            sh -lc 'pnpm test -- --ci --runInBand --detectOpenHandles'

          # tear down
          docker compose --profile test down -v
          
      - name: Dump container logs on failure
        if: failure()
        run: |
          docker compose logs api-tests || true
          docker compose logs api || true
          docker compose logs db || true

  frontend:
    name: Frontend (lint & build)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      # Build React (Vite). We are NOT packaging Electron here.
      - name: Build
        run: pnpm build
